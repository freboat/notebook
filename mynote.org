* EMACS
** org-mode
*** add code block
1. 文本中输入 <s
2. 按一下 Tab 键

#+begin_src | <---光标处,可方便书写语言种类

#+end_src


* Network
** IP cmd usage
ip link set dev eth0 up/down
ip link set dev eth0 address 00:01:4f:00:15:f1
ip link set dev eth0 mtu 1500 txqueuelen 100
ip -s -o link  show eth0
ip -s -o addr
ip addr add 192.168.0.1/24 brd 192.168.0.255 dev eth0
ip address flush dev eth0
ip route add default via 168.200.200.226 dev eth0
ip route show
ip route chg 10.0.0/24 dev dummy
ip route add default scope global nexthop dev ppp0 nexthop dev ppp1
ip route add nat 192.203.80.142 via 193.233.7.83
ip neighbour show

** Linux network config
*** redhat

重启网络：/etc/init.d/network restart/stop
        service network restart


一、配置文件详解
在RHEL或者CentOS等Redhat系的Linux系统里，跟网络有关的主要设置文件如下：

/etc/host.conf         配置域名服务客户端的控制文件
/etc/hosts             完成主机名映射为IP地址的功能
/etc/resolv.conf       域名服务客户端的配置文件,用于指定域名服务器的位置
/etc/sysconfig/network 包含了主机最基本的网络信息,用于系统启动.
/etc/sysconfig/network-script/    系统启动时初始化网络的一些信息
/etc/xinetd.conf       定义了由超级进程xinetd启动的网络服务
/etc/networks          完成域名与网络地址的映射
/etc/protocols         设定了主机使用的协议以及各个协议的协议号
/etc/services          设定主机的不同端口的网络服务


1. /etc/host.conf文件的默认信息如下：

multi on           #允许主机拥有多个IP地址
order hosts,bind   #主机名解析顺序，即本地解析,DNS域名解析的顺序

这个文件一般不需要我们修改，默认的解析顺序是本地解析,DNS服务器解析，也就是说在本系统里对于一个主机名首先进行本地解析，如果本地解析没有，然后进行DNS服务器解析。

2. /etc/hosts文件默认的内容大概如下：

127.0.0.1   butbueatiful   localhost.localdomain localhost
::1             localhost6.localdomain6 localhost6

可见，默认的情况是本机ip和本机一些主机名的对应关系，第一行是ipv4信息，第二行是ipv6信息，如果用不上ipv6本机解析，一般把该行注释掉。
第一行的解析效果是，butbueatiful localhost.localdomain localhost都会被解析成127.0.0.1,我们可以用ping试试。
[root@butbueatiful ~]# ping -c 3 butbueatiful
PING butbueatiful (127.0.0.1) 56(84) bytes of data.
64 bytes from butbueatiful (127.0.0.1): icmp_seq=1 ttl=64 time=0.061 ms
64 bytes from butbueatiful (127.0.0.1): icmp_seq=2 ttl=64 time=0.052 ms
64 bytes from butbueatiful (127.0.0.1): icmp_seq=3 ttl=64 time=0.051 ms

--- butbueatiful ping statistics ---
3 packets transmitted, 3 received, 0% packet loss, time 1999ms
rtt min/avg/max/mdev = 0.051/0.054/0.061/0.009 ms

[root@butbueatiful ~]# ping -c 3 localhost.localdomain
PING butbueatiful (127.0.0.1) 56(84) bytes of data.
64 bytes from butbueatiful (127.0.0.1): icmp_seq=1 ttl=64 time=0.055 ms
64 bytes from butbueatiful (127.0.0.1): icmp_seq=2 ttl=64 time=0.035 ms
64 bytes from butbueatiful (127.0.0.1): icmp_seq=3 ttl=64 time=0.050 ms

--- butbueatiful ping statistics ---
3 packets transmitted, 3 received, 0% packet loss, time 1999ms
rtt min/avg/max/mdev = 0.035/0.046/0.055/0.011 ms

看到上面的结果，你可能会问为什么ping localhost.localdomain的时候，下面显示的是却是butbueatiful，这是因为第一个主机名butbueatiful后面的那些主机名其实都是butbueatiful的主机别名。

如果我们要追加新的本地解析，比如我们希望在我们的机器里把yyyy.com和www.yyyy.com都解析成192.168.0.100，那么就追加如下一句即可：
192.168.0.100 yyyy.com www.yyyy.com

同样，在这里，www.yyyy.com是yyyy.com的主机别名。

如果你仔细一想，会发现，其实这个文件是很危险的，如果有人恶意修改了你这个文件，比如把淘宝的网站域名解析到了他的钓鱼网站，那你就要中招了。

3. /etc/resolv.conf, 指定域名解析的DNS服务器IP等信息, 配置参数一般接触到的有4个：

nameserver    指定DNS服务器的IP地址
domain        定义本地域名信息
search        定义域名的搜索列表
sortlist      对gethostbyname返回的地址进行排序

但是最常用的配置参数是nameserver，其他的可以不设置，这个参数指定了DNS服务器的IP地址，如果设置不正确，就无法进行正常的域名解析。
一般来说，推荐设置2个DNS服务器，比如我们用google的免费DNS服务器，那么该文件的设置内容如下：

nameserver 8.8.8.8
nameserver 8.8.4.4

同样，这个文件也是危险的，如果被人恶意改成了他自己的DNS服务器，他就可以为所欲为的控制你通过域名访问的每个目的地了，这就是常说的DNS劫持。

4. /etc/sysconfig/network, 典型的配置如下：

NETWORKING=yes
NETWORKING_IPV6=no
HOSTNAME=butbueatiful
GATEWAY=192.168.0.1

参数简要解释：
    
NETWORK          设置网络是否有效，yes有效，no无效
NETWORKING_IPV6  设置ipv6网络是否有效，yes有效，no无效
HOSTNAME         设置服务器的主机名，最好和/etc/hosts里设置一样，否则在使用一些程序的时候会有问题。
GATEWAY          指定默认网关IP

5. ifcfg-ethX, 设置对应网口的IP等信息, 比如第一个网口, 那么就是/etc/sysconfig/network-scripts/ifcfg-eth0，配置例子：

DEVICE="eth0"
BOOTPROTO="static"
BROADCAST="192.168.0.255"
HWADDR="00:16:36:1B:BB:74"
IPADDR="192.168.0.100"
NETMASK="255.255.255.0"
ONBOOT="yes"

参数简要解释：

DEVICE        设备名，不要自己乱改，和文件ifcfg-ethX里的ethX要一致
BROADCAST     广播地址
HWADDR        物理地址，这个你不要乱改
IPADDR        IP地址
NETMASK       子网掩码
ONBOOT        启动或者重启网络时，是否启动该设备，yes是启动，no是不启动
BOOTPROTO     开机协议，最常见的三个参数如下：
              static(静态IP)
              none(不指定,设置固定ip的情况，这个也行，但是如果要设定多网口绑定bond的时候，必须设成none）
              dhcp(动态获得IP相关信息）

6. route-ethX,比如第一个网口eth0的路由信息,那么就是/etc/sysconfig/network-scripts/route-eth0：

比如我们现在有这样一个需求，通过eth0去网络172.17.27.0/24不走默认路由，需要走192.168.0.254，那么我们第一反应，肯定是用route命令追加路由信息：
[root@butbueatiful ~]# route add -net 172.17.27.0 netmask 255.255.255.0 gw 192.168.0.254 dev eth0

可是，你没意识到的是，这样只是动态追加的而已，重启网络后，路由信息就消失了，所以需要设置静态路由，这时候就要设置/etc/sysconfig/network-scripts/route-eth0文件了，如果没有该文件，你就新建一个：
[root@butbueatiful ~]# vi /etc/sysconfig/network-scripts/route-eth0
#追加
172.17.27.0/24via 192.168.0.254

这下即使重启网络，重启系统，该路由也会自动加载，当然了，如果你没有这样的需要，那么这个文件就没必要创建和配置了。

二、常用的网络配置

伴随着时间的推移Red Hat公司推出了RHEL6.2，随后CentOS也紧随其后退出了CentOS6.2。新的系统中厂商加入了大量虚拟化及云计算的元素，同时对于细节的改变也不少，这里我们仅对新系统中的网络参数做以详尽说明。

Linux中网络参数大致包含以下内容：

IP地址
子网掩码
网关
DNS服务器
主机名

历来Linux系统中修改这些参数的方式通常有：命令、文件两种。其中通过命令设置可以立即生效但重启后将失效，通过文件修改实现永久生效，但不会立即生效。

首先我们来看看命令的方式：

ifconfig：查看与设置IP地址、子网掩码
hostname：查看与设置主机名
route：     查看与设置路由信息（默认网关等）

通过文件的方式修改：

/etc/sysconfig/network-scripts/ifcfg-设备名（通常为ifcfg-eth0)
/etc/sysconfig/network
/etc/resolv.conf文件：设置DNS服务器

以上种种这些方式可以同时在5.0与6.0系统中实现，但6.0系统后官方文档中描述说：ifconfig与route是非常陈旧的命令，取而代之的是ip命令。

那么我们先看一下老的命令使用方式：
*************************************************************************
ifconfig    接口  选项|地址

# ifconfig  eth0  up          # 开启eth0网卡
# ifconfig  eth0  down        # 关闭eth0网卡
# ifconfig  eth0  -arp        # 关闭eth0网卡arp协议
# ifconfig  eth0  promisc     # 开启eth0网卡的混合模式
# ifconfig  eth0  mtu 1400    # 设置eth0网卡的最大传输单元为1400
# ifconfig  eth0  192.168.0.2/24    # 设置eth0网卡IP地址
# ifconfig  eth0  192.168.0.2  netmask 255.255.255.0    # 功能同上

*************************************************************************
主机名：

# hostname        # 查看主机名
# hostname  butbueatiful.com    # 设置主机名为butbueatiful.com

*************************************************************************
网关设置：

route  add [-net|-host] target [netmask] gw
route  del [-net|-host] target [netmask] gw

# route add  -net 192.168.3.0/24  gw  192.168.0.254    # 设置到192.168.3.0网段的网关为192.168.0.254
# route add  -net 192.168.3.0 netmask 255.255.255.0  gw  192.168.0.254    # 功能同上
# route add  -host 192.168.4.4  gw  192.168.0.254    # 设置到192.168.4.4主机的网关为192.168.0.254
#
# route del  -net 192.168.3.0/24                        # 删除192.168.3.0网段的网关信息
# route del  -host 192.168.4.4                        # 删除192.168.4.4主机的网关信息
# route add default gw  192.168.0.254                # 设置默认网关为192.168.0.254
# route del default gw  192.168.0.254                # 删除默认网关为192.168.0.254

*************************************************************************

而如今官方不再推荐使用如此陈旧的命令而推荐使用 ip 这个命令，以下我们看看它的用法：

ip  [选项]  操作对象{link|addr|route...}

# ip link show                  # 显示网络接口信息
# ip link set eth0 upi          # 开启网卡
# ip link set eth0 down         # 关闭网卡
# ip link set eth0 promisc on   # 开启网卡的混合模式
# ip link set eth0 promisc offi # 关闭网卡的混个模式
# ip link set eth0 txqueuelen 1200    # 设置网卡队列长度
# ip link set eth0 mtu 1400     # 设置网卡最大传输单元
# ip addr show                  # 显示网卡IP信息
# ip addr add 192.168.0.1/24 dev eth0 # 设置eth0网卡IP地址192.168.0.1
# ip addr del 192.168.0.1/24 dev eth0 # 删除eth0网卡IP地址

# ip route list                 # 查看路由信息
# ip route add 192.168.4.0/24  via  192.168.0.254 dev eth0 # 设置192.168.4.0网段的网关为192.168.0.254,数据走eth0接口
# ip route add default via  192.168.0.254  dev eth0    # 设置默认网关为192.168.0.254
# ip route del 192.168.4.0/24    # 删除192.168.4.0网段的网关
# ip route del default    # 删除默认路由

**************************************************************
接下来再看看通过文件修改网络参数：（CentOS6.2系统为例）

# cat  /etc/sysconfig/network-scripts/ifcfg-eth0   

DEVICE="eth0"              设备名
NM_CONTROLLED="yes"        设备是否被NetworkManager管理
ONBOOT="no"                开机是否启动
HWADDR="00:0C:29:59:E2:D3" 硬件地址（MAC地址）
TYPE=Ethernet              类型
BOOTPROTO=none             启动协议{none|dhcp}
IPADDR=192.168.0.1         IP地址
PREFIX=24                  子网掩码
GATEWAY=192.168.0.254      默认网关
DNS1=202.106.0.20          主DNS
DOMAIN=202.106.46.151      辅助DNS
UUID=5fb06bd0-0bb0-7ffb-45f1-d6edd65f3e03    设备UUID编号

**************************************************************
# cat /etc/sysconfig/network

HOSTNAME=butbueatiful.com    主机名

**************************************************************

注意：在5.0时代DNS服务器写在 /etc/resolv.conf 文件中，但到了6.0时代DNS可以写在/etc/resolv.conf但是此时需要在 /etc/sysconfig/network-scripts/ifcfg-eth0 文件中添加 PEERDNS=no 配置，不然每次重启网卡就会重写/etc/resolv.conf文件的内容，当然了也可以直接写在 /etc/sysconfig/network-scripts/ifcfg-eth0 文件中。


后记：

1. 配置/etc/resolv.confg重启丢失解决方法：

一种方法是把 PEERDNS 设置为“no”。

找到网卡配置文件，位置和： /etc/sysconfig/network-scripts/ifcfg-eth 文件中加入PEERDNS 选项。可以是 0, 1, 2等等，代表不同网卡的配置文件。例如，系统上第一张网卡是eth0的话，那它的配置文件就是/etc/sysconfig/network-scripts/ifcfg-eth0 然后在文件中把 PEERDNS 改为 ‘no’.
例如：

DEVICE=eth0
BOOTPROTO=dhcp
ONBOOT=yes
TYPE=Ethernet
PEERDNS=no

这个选项可令 /etc/resolv.conf 在系统重启后不会被重写。

另一种方法是在这个文件中增加DNS：
如：
DNS1=127.0.0.1
DNS2=8.8.8.8

2. 安全设置

   我们前面说了/etc/resolv.conf和/etc/hosts被人篡改了的话, 会很危险, 那我们在设置好着2个文件后, 做一下处理, 让这2个文件默认不能直接修改, 即使root也不行, 执行如下命令：
[root@butbueatiful ~]# chattr +i /etc/{resolv.conf,hosts}

如果我们自己想修改的时候，执行：   
[root@butbueatiful ~]# chattr -i /etc/{resolv.conf,hosts}

然后就可以修改了，修改完了别忘记+i。

3. 网络排除思路

检查配置文件是否有错误(书写及语法错误等）
检查本机网络协议是否正确：# ping -c 3 127.0.0.1
检查本机网卡链路是否正确：# ping -c 3 192.168.0.1(本机IP地址)
检查网关是否正确：       # ping -c 3 192.168.0.254(网关IP地址)
检查外部连通性：        # ping -c 3 www.google.com.hk
检查硬件
***
*** slackware
netconfig 命令配置eth0网卡

编辑/etc/rc.d/rc.inet1.conf 
#Config information for eth0: 注：网卡eth0的配置； 
IPADDR[0]="192.168.123.216" 注：指定IP地址；
NETMASK[0]="255.255.255.0" 注：指定掩码；
USE_DHCP[0]="no" 
#注：不用DHCP获得IP；注：在这里写上yes，表示用DHCP获得IP； 
DHCP_HOSTNAME[0]="linuxsir01" 
#注：DNS服务器主机名，也可以用IP来指定DNS服务器；
#Default gateway IP address:
GATEWAY="192.168.123.254" 注：指定网关；

运行/etc/rc.d/rc.inet1激活网卡 
*** ubuntu
/etc/NetworkManager/NetworkManager.conf  中managed=false 禁用NM.

Ubuntu系统进行网络配置有的时候用图形界面不起作用，这种情况下可以直接修改某些启动脚本或配置文件
Ubuntu系统进行网络配置涉及到几个配置文件1./etc/network/interfaces 2./etc/resolv.conf
操纵步骤：
1.打开ubuntu的/etc/network/interfaces文件默认的内容如下：
auto lo
iface lo inet loopback
动态获取的配置方法：
auto eth0
iface eth0 inet dhcp
静态分配的配置方法：
auto eth0
iface eth0 inet static
address 192.168.0.1
netmask  255.255.255.0
gateway  192.168.0.1
根据配置要求（是动态分配还是自动获取）修改该配置文件保存。
 
2.添加域名服务器：打开/etc/resolv.conf文件
 添加这行:nameserver 202.99.166.4
 
3.重启下网络
$/etc/init.d/networking restart(这条命令是重启网卡)
或者
$ifdown eth0
$ifup   eth0（这两条命令是有针对性的重启某个网络接口，因为一个系统可能有多个网络接口）
 
4.查看网络配置的参数是不是正确（每进行一次操作都可以查看一下是不是修改了网络配置）
$ifconfig
 
5.看看是不是能够ping通
ping不通网关说明网络配置有问题 ping不通域名说明dns有问题
 
有些时候需要修改网卡的硬件地址：
方法一：
$ifconfig eth0 hw ether XX:XX:XX:XX:XX:XX
$/etc/init.d/networking restart(重启网卡)
方法二：
以上只是暂时的修改硬件地址要永久修改，直接编辑 /etc/network/interfaces 文件，在 iface eth0 inet static 后面添加一行： pre-up ifconfig eth0 hw ether xx:xx:xx:xx:xx:xx（要改成的MAC）
$ sudo /etc/init.d/networking restart（重启网卡）

* Software
*** GIT
git push -u origin master

*** Vi find & replace
**** 一、查找

查找命令

/pattern<Enter> ：向下查找pattern匹配字符串
?pattern<Enter>：向上查找pattern匹配字符串
使用了查找命令之后，使用如下两个键快速查找：
n：按照同一方向继续查找
N：按照反方向查找

字符串匹配

pattern是需要匹配的字符串，例如：

1:  /abc<Enter>      #查找abc

2:  / abc <Enter>    #查找abc单词（注意前后的空格） 

  除此之外，pattern还可以使用一些特殊字符，包括（/、^、$、*、.），其中前三个这两个是vi与vim通用的，“/”为转义字符。

1:  /^abc<Enter>    #查找以abc开始的行 

2:  /test$<Enter>    #查找以abc结束的行 

3:  //^test<Enter>    #查找^tabc字符串

**** 二、替换

基本替换

1:  :s/vivian/sky/         #替换当前行第一个 vivian 为 sky

2:  :s/vivian/sky/g     #替换当前行所有 vivian 为 sky

3:  :n,$s/vivian/sky/     #替换第 n 行开始到最后一行中每一行的第一个 vivian 为 sky

4:  :n,$s/vivian/sky/g     #替换第 n 行开始到最后一行中每一行所有 vivian 为 sky

5:  （n 为数字，若 n 为 .，表示从当前行开始到最后一行）

6:  

7:  :%s/vivian/sky/        #（等同于 :g/vivian/s//sky/） 替换每一行的第一个 vivian 为 sky

8:  :%s/vivian/sky/g    #（等同于 :g/vivian/s//sky/g） 替换每一行中所有 vivian 为 sky

  可以使用 #或+ 作为分隔符，此时中间出现的 / 不会作为分隔符

1:  :s#vivian/#sky/#         替换当前行第一个 vivian/ 为 sky/

2:  :%s+/oradata/apras/+/user01/apras1+ （

3:  使用+ 来 替换 / ）： /oradata/apras/替换成/user01/apras1/

 
删除文本中的^M

问题描述：对于换行，window下用回车换行（0A0D）来表示，linux下是回车（0A）来表示。这样，将window上的文件拷到unix上用时，总会有个^M，请写个用在unix下的过滤windows文件的换行符（0D）的shell或c程序。
使用命令：cat filename1 | tr -d “^V^M” > newfile;
使用命令：sed -e “s/^V^M//” filename > outputfilename
需要注意的是在1、2两种方法中，^V和^M指的是Ctrl+V和Ctrl+M。你必须要手工进行输入，而不是粘贴。
在vi中处理：首先使用vi打开文件，然后按ESC键，接着输入命令：

1:  :%s/^V^M//

2:  :%s/^M$//g

如果上述方法无用，则正确的解决办法是：

1:  tr -d “/r” < src >dest

2:  tr -d “/015″ dest

3:  

4:  strings A>B

**** 三、简单的vim正则表达式规则

在vim中有四种表达式规则：
magic(/m)：除了$.*^之外其他元字符都要加反斜杠
nomagic(/M)：除了$^之外其他元字符都要加反斜杠
/v（即 very magic 之意）：任何元字符都不用加反斜杠
/V（即 very nomagic 之意）：任何元字符都必须加反斜杠

vim默认使用magic设置，这个设置也可以在正则表达式中通过 /m /M /v /V开关临时切换。例如：

1:  //m.*          # 查找任意字符串

2:  //M.*          # 查找字符串 .* （点号后面跟个星号）

3:  

4:  //v(a.c){3}$   # 查找行尾的abcaccadc

5:  //m(a.c){3}$   # 查找行尾的(abc){3}

6:  //M(a.c){3}$   # 查找行尾的(a.c){3}

7:  //V(a.c){3}$   # 查找任意位置的(a.c){3}$

推荐使用默认的magic设置，在这种情况下，常用的匹配有：
#+BEGIN_SRC sh

 1:  //<abc          #查找以test开始的字符串 

 2:  /abc/>          #查找以test结束的字符串 

 3:  

 4:  $       匹配一行的结束

 5:  ^       匹配一行的开始

 6:  /<      匹配一个单词的开始，例如//<abc<Enter>:查找以abc开始的字符串

 7:  />      匹配一个单词的结束，例如/abc/><Enter>:查找以abc结束的字符串 

 8:  

 9:  *       匹配0或多次

10:  /+      匹配1或多次

11:  /=      匹配0或1次

12:  

13:  .        匹配除换行符以外任意字符    

14:  /a      匹配一个字符

15:  /d      匹配任一数字      

16:  /u      匹配任一大写字母

17:  

18:  []      匹配范围，如t[abcd]s 匹配tas tbs tcs tds

19:  /{}     重复次数，如a/{3,5} 匹配3~5个a

20:  /( /)   定义重复组，如a/(xy/)b 匹配ab axyb axyxyb axyxyxyb ...

21:  /|      或，如：for/|bar 表示匹配for或者bar

22:  

23:  /%20c   匹配第20列

24:  /%20l   匹配第20行
#+END_SRC 

关于正则表达式的详细信息，请参见参考文献
**** 其它用法

1:  :s/str1/str2/          #用字符串 str2 替换行中首次出现的字符串 str1

2:  :s/str1/str2/g         #用字符串 str2 替换行中所有出现的字符串 str1

3:  :.,$ s/str1/str2/g     #用字符串 str2 替换正文当前行到末尾所有出现的字符串 str1

4:  :1,$ s/str1/str2/g     #用字符串 str2 替换正文中所有出现的字符串 str1

5:  :g/str1/s//str2/g      #功能同上

从上述替换命令可以看到：
g 放在命令末尾，表示对指定行的搜索字符串的每次出现进行替换；不加 g，表示只对指定行的搜索字符串的首次出现进行替换；
g 放在命令开头，表示对正文中所有包含搜索字符串的行进行替换操作。
也就是说命令的开始可以添加影响的行，如果为g表示对所有行；命令的结尾可以使用g来表示是否对每一行的所有字符串都有影响。
